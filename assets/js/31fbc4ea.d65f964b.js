"use strict";(self.webpackChunkverkle_dev=self.webpackChunkverkle_dev||[]).push([[936],{3905:(e,t,a)=>{a.d(t,{Zo:()=>l,kt:()=>d});var n=a(7294);function m(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){m(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,m=function(e,t){if(null==e)return{};var a,n,m={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(m[a]=e[a]);return m}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(m[a]=e[a])}return m}var p=n.createContext({}),o=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},l=function(e){var t=o(e.components);return n.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,m=e.mdxType,s=e.originalType,p=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),h=o(a),d=m,k=h["".concat(p,".").concat(d)]||h[d]||c[d]||s;return a?n.createElement(k,r(r({ref:t},l),{},{components:a})):n.createElement(k,r({ref:t},l))}));function d(e,t){var a=arguments,m=t&&t.mdxType;if("string"==typeof e||m){var s=a.length,r=new Array(s);r[0]=h;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:m,r[1]=i;for(var o=2;o<s;o++)r[o]=a[o];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},9487:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>c,frontMatter:()=>s,metadata:()=>i,toc:()=>o});var n=a(7462),m=(a(7294),a(3905));const s={},r="Suffix Node Commitment",i={unversionedId:"implementation/suffix node commitment",id:"implementation/suffix node commitment",title:"Suffix Node Commitment",description:"To generate the suffix node commitment, we use a nested Pedersen commitment (a Pedersen commitment of the Pedersen commitments $C1$ and $C2$).",source:"@site/docs/03-implementation/01-suffix node commitment.md",sourceDirName:"03-implementation",slug:"/implementation/suffix node commitment",permalink:"/docs/implementation/suffix node commitment",draft:!1,editUrl:"https://github.com/ethereum/verkle-dev-website/blob/master/docs/03-implementation/01-suffix node commitment.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Verkle Trie Structure",permalink:"/docs/implementation/verkle trie structure"},next:{title:"Generating the CRS",permalink:"/docs/implementation/crs"}},p={},o=[],l={toc:o};function c(e){let{components:t,...s}=e;return(0,m.kt)("wrapper",(0,n.Z)({},l,s,{components:t,mdxType:"MDXLayout"}),(0,m.kt)("h1",{id:"suffix-node-commitment"},"Suffix Node Commitment"),(0,m.kt)("p",null,"To generate the suffix node commitment, we use a nested Pedersen commitment (a Pedersen commitment of the Pedersen commitments ",(0,m.kt)("span",{parentName:"p",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow"},"C"),(0,m.kt)("mn",{parentName:"mrow"},"1")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"C1")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.07153em"}},"C"),(0,m.kt)("span",{parentName:"span",className:"mord"},"1")))))," and ",(0,m.kt)("span",{parentName:"p",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow"},"C"),(0,m.kt)("mn",{parentName:"mrow"},"2")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"C2")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.07153em"}},"C"),(0,m.kt)("span",{parentName:"span",className:"mord"},"2"))))),")."),(0,m.kt)("p",null,(0,m.kt)("img",{alt:"merkle_00",src:a(4554).Z,width:"2004",height:"1048"})),(0,m.kt)("p",{align:"center"},"Figure 1. Suffix node"),(0,m.kt)("p",null,"We cannot use a single flat Pedersen commitment over all the suffix node values because the implementation specified in the ",(0,m.kt)("a",{parentName:"p",href:"https://notes.ethereum.org/@vbuterin/verkle_tree_eip"},"EIP")," is limited to committing 256 values of up to 253 bits in size. This is a mismatch with the suffix node storing 256 values of up to 256 bits (or 32 bytes) in size."),(0,m.kt)("p",null,"So to avoid losing 3 bits of information per key-value pair, we split each 32-byte/256-bit value into two 128-bit halves, resulting in 512 elements of 128-bits in size. ",(0,m.kt)("span",{parentName:"p",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow"},"C"),(0,m.kt)("mn",{parentName:"mrow"},"1")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"C1")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.07153em"}},"C"),(0,m.kt)("span",{parentName:"span",className:"mord"},"1")))))," is the Pedersen commitment of the first batch of 256 of these 128-bit half-elements, and ",(0,m.kt)("span",{parentName:"p",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow"},"C"),(0,m.kt)("mn",{parentName:"mrow"},"2")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"C2")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.07153em"}},"C"),(0,m.kt)("span",{parentName:"span",className:"mord"},"2")))))," is the Pedersen commitment of the second batch. "),(0,m.kt)("p",null,(0,m.kt)("img",{alt:"merkle_00",src:a(9134).Z,width:"1604",height:"840"})),(0,m.kt)("p",{align:"center"},"Figure 2. Suffix node values split into 128-bit halves"),(0,m.kt)("p",null,"Pedersen commitments can be converted to a 253-bit value (through the ",(0,m.kt)("inlineCode",{parentName:"p"},"group_to_field")," method defined in the ",(0,m.kt)("a",{parentName:"p",href:"https://notes.ethereum.org/@vbuterin/verkle_tree_eip"},"EIP"),"), so we can proceed to create a 'higher-order' Pedersen commitment of both ",(0,m.kt)("span",{parentName:"p",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow"},"C"),(0,m.kt)("mn",{parentName:"mrow"},"1")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"C1")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.07153em"}},"C"),(0,m.kt)("span",{parentName:"span",className:"mord"},"1")))))," and ",(0,m.kt)("span",{parentName:"p",className:"math math-inline"},(0,m.kt)("span",{parentName:"span",className:"katex"},(0,m.kt)("span",{parentName:"span",className:"katex-mathml"},(0,m.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,m.kt)("semantics",{parentName:"math"},(0,m.kt)("mrow",{parentName:"semantics"},(0,m.kt)("mi",{parentName:"mrow"},"C"),(0,m.kt)("mn",{parentName:"mrow"},"2")),(0,m.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"C2")))),(0,m.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,m.kt)("span",{parentName:"span",className:"base"},(0,m.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,m.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.07153em"}},"C"),(0,m.kt)("span",{parentName:"span",className:"mord"},"2"))))),". The suffix node commitment is defined as the Pedersen commitment of the 256-length array ",(0,m.kt)("inlineCode",{parentName:"p"},"[1, stem, C1, C2, 0, 0, ..., 0]"),"."),(0,m.kt)("p",null,(0,m.kt)("img",{alt:"merkle_00",src:a(6218).Z,width:"1008",height:"608"})),(0,m.kt)("p",{align:"center"},"Figure 3. Suffix node commitment"),(0,m.kt)("p",null,"The ",(0,m.kt)("a",{parentName:"p",href:"https://notes.ethereum.org/@vbuterin/verkle_tree_eip"},"EIP")," specifies that the Bandersnatch elliptic curve be used to generate Pedersen commitments, which is where the 253-bit size limit comes from. The Bandersnatch elliptic curve allows for more efficient zero-knowledge operations, and is used in verkle tries to facilitate zero-knowledge based optimizations in the future. In contrast the secp256k1 elliptic curve used in the original Ethereum protocol is less zero-knowledge friendly and hence less future-proof."))}c.isMDXComponent=!0},4554:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/suffix_node_1-8a86820230457819e475d2782dc3e179.png"},9134:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/suffix_node_2-5c05b70f0facd2344b8f4daffc04c5d9.png"},6218:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/suffix_node_3-cfd789b82c68e6058854d9fa10bb07bc.png"}}]);